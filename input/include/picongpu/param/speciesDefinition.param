/* Copyright 2013-2018 Rene Widera, Benjamin Worpitz, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Define particle species.
 *
 * This file collects all previous declarations of base (reference) quantities
 * and configured solvers for species and defines particle species. This
 * includes "attributes" (lvalues to store with each species) and "flags"
 * (rvalues & aliases for solvers to perform with the species for each timestep
 * and ratios to base quantities). With those information, a `Particles` class
 * is defined for each species and then collected in the list
 * `VectorAllSpecies`.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
#include "picongpu/particles/Particles.hpp"

#include <pmacc/particles/Identifier.hpp>
#include <pmacc/meta/conversion/MakeSeq.hpp>
#include <pmacc/identifier/value_identifier.hpp>
#include <pmacc/particles/traits/FilterByFlag.hpp>
#include <pmacc/meta/String.hpp>

namespace picongpu
{

/*########################### define particle attributes #####################*/

/** describe attributes of a particle*/
using DefaultParticleAttributes = MakeSeq_t<
    position< position_pic >,
    momentum,
    weighting
>;

using IonParticleAttributes = MakeSeq_t<
    DefaultParticleAttributes,
    boundElectrons
>;

/*########################### end particle attributes ########################*/

/*########################### define species #################################*/


value_identifier( float_X, MassRatioe, 1.0 );
value_identifier( float_X, ChargeRatioe, 1.0 );
value_identifier( float_X, DensityRatioe, 1 );

using ParticleFlagse = MakeSeq_t<
    particlePusher< UsedParticlePushere >,
    shape< UsedParticleShapee >,
    interpolation< UsedField2Particlee >,
    current< UsedParticleCurrentSolvere >,
    massRatio< MassRatioe >,
    chargeRatio< ChargeRatioe >,
    densityRatio< DensityRatioe >
>;

/* define species electrons */
using PIC_e = Particles<
    PMACC_CSTRING( "e" ),
    ParticleFlagse,
    DefaultParticleAttributes
>;

value_identifier( float_X, MassRatioH, 1.837471594107052e+03 );
value_identifier( float_X, ChargeRatioH, -1 );
value_identifier( float_X, DensityRatioH, 4.999999999999999e+02 );

using ParticleFlagsH = MakeSeq_t<
    particlePusher< UsedParticlePusherH >,
    shape< UsedParticleShapeH >,
    interpolation< UsedField2ParticleH >,
    current< UsedParticleCurrentSolverH >,
    massRatio< MassRatioH >,
    chargeRatio< ChargeRatioH >,
    densityRatio< DensityRatioH >,
    ionizers<
        MakeSeq_t<
            particles::ionization::BSIEffectiveZ< PIC_e >,
            particles::ionization::ADKLinPol< PIC_e >
        >
    >,
    ionizationEnergies< ionization::energies::AU::Hydrogen_t >,
    effectiveNuclearCharge< ionization::effectiveNuclearCharge::Hydrogen_t >,
    atomicNumbers< ionization::atomicNumbers::Hydrogen_t >
>;

using PIC_H = Particles<
    PMACC_CSTRING( "H" ),
    ParticleFlagsH,
    IonParticleAttributes
>;

value_identifier( float_X, MassRatioC, 2.189471360795615e+04 );
value_identifier( float_X, ChargeRatioC, -6 );
value_identifier( float_X, DensityRatioC, 4.999999999999999e+02 );

using ParticleFlagsC = MakeSeq_t<
    particlePusher< UsedParticlePusherC >,
    shape< UsedParticleShapeC >,
    interpolation< UsedField2ParticleC >,
    current< UsedParticleCurrentSolverC >,
    massRatio< MassRatioC >,
    chargeRatio< ChargeRatioC >,
    densityRatio< DensityRatioC >,
    ionizers<
        MakeSeq_t<
            particles::ionization::BSIEffectiveZ< PIC_e >,
            particles::ionization::ADKLinPol< PIC_e >
        >
    >,
    ionizationEnergies< ionization::energies::AU::Carbon_t >,
    effectiveNuclearCharge< ionization::effectiveNuclearCharge::Carbon_t >,
    atomicNumbers< ionization::atomicNumbers::Carbon_t >
>;

using PIC_C = Particles<
    PMACC_CSTRING( "C" ),
    ParticleFlagsC,
    IonParticleAttributes
>;


/*########################### end species ####################################*/

/** All known particle species of the simulation
 *
 * List all defined particle species from above in this list
 * to make them available to the PIC algorithm.
 */
using VectorAllSpecies = MakeSeq_t<
PIC_e,
PIC_H,
PIC_C
>;

} // namespace picongpu
